#!/bin/sh

set -e
set -u

set_vars() {
    CRTSCRIPT="$0"
    CRTSCRIPT_ABS="`readlink -f ${CRTSCRIPT}`"

    DEF_WORKDIR="${CRTSCRIPT_ABS%/*}"
    WORKDIR="${WORKDIR:-${DEF_WORKDIR}}"

    DEF_CKPFILE="${WORKDIR}/test.ckp"
    CKPFILE="${CKPFILE:-${DEF_CKPFILE}}"

    DEF_TMPFSDIR="${WORKDIR}/tmpfs_dir"
    TMPFSDIR="${TMPFSDIR:-${DEF_TMPFSDIR}}"

    if [ "${GUEST_TYPE}" == "Linux" ]; then
        DEF_ISOFILE="${WORKDIR}/debian-9.5.0-amd64-netinst.iso"
        DEF_GUESTIMG_DISK="${WORKDIR}/linux_guest.img"
    elif [ "${GUEST_TYPE}" == "FreeBSD" ]; then
        DEF_ISOFILE="${WORKDIR}/FreeBSD-11.2-RELEASE-amd64-bootonly.iso"
        DEF_GUESTIMG_DISK="${WORKDIR}/guest.img"
    else
        echo "Unknown guest type ${GUEST_TYPE}" 1>&2
        exit 2
    fi
    ISOFILE="${ISOFILE:-${DEF_ISOFILE}}"
    GUESTIMG_DISK="${GUESTIMG_DISK:-${DEF_GUESTIMG_DISK}}"

    DEF_GUESTIMG_TMP="${TMPFSDIR}/${DEF_GUESTIMG_DISK##*/}"
    GUESTIMG_TMP="${GUESTIMG_TMP:-${DEF_GUESTIMG_TMP}}"

    DEF_GUESTIMG_SIZE="4096M"
    GUESTIMG_SIZE="${GUESTIMG_SIZE:-${DEF_GUESTIMG_SIZE}}"

    DEF_MNTDIR="/mnt"
    MNTDIR="${MNTDIR:-${DEF_MNTDIR}}"

    VMNAME="${VMNAME:-vmachine}"
    MDNUM="50" # big numbers have a small chance to be used # TODO: parse number if possible
}

usage() {
    eval 1>&2
    printf -- "$CRTSCRIPT [-CRSbcdhlmrtu]\n"
    printf -- "Perform regular operations on a bhyve virtual machine\n"
    printf -- "If a temp file exists, use it since it is in a tmpfs ramdisk\n"
    printf -- "since the image may get broken. To replace it, simply run \`$CRTSCRIPT -t\`\n"
    printf -- "If the tmpfs does not exist, create it and copy the image there to keep the disk image fresh\n"
    printf -- "\n"
    printf -- "At least one parameter must be provided.\n"
    printf -- "'-l' is a modifier, not a parameter - at least another parameter is required\n"
    printf -- "\n"
    printf -- "The following options are available:\n"
    printf -- "-C Create a checkpoint for the virtual machine\n"
    printf -- "-R Restore the virtual machine from a previous checkpoint\n"
    printf -- "-S Suspend the virtual machine\n"
    printf -- "-c Create a virtual machine named vmachine\n"
    printf -- "-d Destroy the virtual machine\n"
    printf -- "-h Display this help message and exit\n"
    printf -- "-l use a Linux guest in stead of FreeBSD. Must be the first argument if given\n"
    printf -- "-m create a memdisk device for the guest image and mount it over \$MNTDIR\n"
    printf -- "-r Run virtual machine\n"
    printf -- "-t copy virtual machine disk file to tmpfs\n"
    printf -- "-u unmount \$MNTDIR and delete the memdisk device\n"
    printf -- "\n"
    printf -- "The script uses the following variables:\n"
    printf -- " -- VMNAME:        Name of the virtual machine\n"
    printf -- " -- WORKDIR:       Root work directory; other filesystem-related variables are set relative to this\n"
    printf -- " -- ISOFILE:       Name of the guest installation disk\n"
    printf -- " -- CKPFILE:       Name of guest memory checkpoint file\n"
    printf -- " -- GUESTIMG_DISK: Name of the guest image disk file\n"
    printf -- " -- TMPFSDIR:      A directory where the guest image will be copied; a tmpfs will be mounted on top of it\n"
    printf -- " -- GUESTIMG_TMP:  Name of the temporary copy of the guest disk file\n"
    printf -- " -- GUESTIMG_SIZE: Size of the guest image file, as used by truncate(1)\n"
    printf -- " -- MNTDIR:        Guest image mount target directory\n"
    printf -- "\n"
    printf -- "Default values:\n"
    printf -- " -> VMNAME:        vmachine\n"
    printf -- " -> WORKDIR:       The parent directory of this script (${DEF_WORKDIR})\n"
    printf -- " -> ISOFILE:       \${WORKDIR}/${DEF_ISOFILE##*/} (${DEF_ISOFILE})\n"
    printf -- " -> CKPFILE:       \${WORKDIR}/test.ckp (${DEF_CKPFILE})\n"
    printf -- " -> GUESTIMG_DISK: \${WORKDIR}/${DEF_GUESTIMG_DISK##*/} (${DEF_GUESTIMG_DISK})\n"
    printf -- " -> TMPFSDIR:      \${WORKDIR}/tmpfs_dir (${DEF_TMPFSDIR})\n"
    printf -- " -> GUESTIMG_TMP:  \${TMPFSDIR}/${DEF_GUESTIMG_TMP##*/} (${DEF_GUESTIMG_TMP})\n"
    printf -- " -> GUESTIMG_SIZE: ${DEF_GUESTIMG_SIZE}\n"
    printf -- " -> MNTDIR:        ${DEF_MNTDIR}\n"
    printf -- "\n"
    exit $1
}


GUEST_TYPE="FreeBSD"

if [ $# -ge 1 ]; then
    case "$1" in
        -l*)
            GUEST_TYPE="Linux"
            if [ "$1" != "-l" ]; then
                NEXTARG="-${1#-l}"
                shift
                set -- "${NEXTARG}" "$@"
            else
                shift
            fi
            ;;
    esac
fi

set_vars

if [ $# -lt 1 ]; then usage 1; fi


GUESTIMG() {
    if ! $(mount | grep "`readlink -f ${TMPFSDIR}`" 2>&1 >/dev/null && test -f "${GUESTIMG_TMP}"); then
        cp_vm_tmpfs
    fi
    echo "${GUESTIMG_TMP}"
}

checkpoint_vm() {
    ${WORKDIR}/${GUEST_TYPE}_checkpoint_vm.sh "${CKPFILE}" "${VMNAME}"
}

restore_vm() {
    ${WORKDIR}/${GUEST_TYPE}_restore_vm.sh "$(GUESTIMG)" "${CKPFILE}" "${VMNAME}"
}

suspend_vm() {
    ${WORKDIR}/${GUEST_TYPE}_suspend_vm.sh "${CKPFILE}" "${VMNAME}"
}

cp_vm_tmpfs() {
    echo "Copying the virtual machine disk to tmpfs..." 1>&2
    if ! $(mount | grep "`readlink -f ${TMPFSDIR}`" 2>&1 >/dev/null); then
        mount -t tmpfs tmpfs "${TMPFSDIR}"
    fi

    rm -f -v "${TMPFSDIR}"/* 1>&2

    cp -v "${GUESTIMG_DISK}" "${GUESTIMG_TMP}"
} 1>&2

create_vm() {
    truncate -s ${GUESTIMG_SIZE} "${GUESTIMG_DISK}"
    ${WORKDIR}/${GUEST_TYPE}_create_vm.sh "${GUESTIMG_DISK}" "${ISOFILE}" "${VMNAME}" >/dev/null
    cp_vm_tmpfs
}

destroy_vm() {
    bhyvectl --destroy --vm="${VMNAME}"
}

run_vm() {
    ${WORKDIR}/${GUEST_TYPE}_run_vm.sh "$(GUESTIMG)" "${VMNAME}"
}

bad_argument() {
    echo "$@" 1>&2
    exit 3
}

mount_vm_image() {
    mdconfig -u "${MDNUM}" "$(GUESTIMG)"
    mount "/dev/md${MDNUM}s1a" "${MNTDIR}"
}

umount_vm_image() {
    umount "${MNTDIR}"
    mdconfig -d -u "${MDNUM}"
}

while getopts "CRSbcdhlmrtu" opt; do
    case "${opt}" in
        C) checkpoint_vm;;
        R) restore_vm;;
        S) suspend_vm;;
        c) create_vm;;
        d) destroy_vm;;
        h) usage 0;;
        l) bad_argument "Option '-l' must be the first argument";;
        m) mount_vm_image;;
        r) run_vm;;
        t) cp_vm_tmpfs;;
        u) umount_vm_image;;
        *) usage 1;;
    esac
done
