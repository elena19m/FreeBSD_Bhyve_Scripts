#!/usr/bin/env bash

set -e
set -u

# Declare the variable keys here in the order of their dependecies
# This must be done here, since associative arrays do not guarantee that
# the keys are iterated in the order they are declared in the script
VARIABLES=(
        VMNAME GUEST_TYPE WORKDIR ISOFILE CKPFILE GUESTIMG_DISK TMPFSDIR GUESTIMG_TMP
        GUESTIMG_SIZE MNTDIR MDNUM NETDEV BLKDEV MEMSIZE CPUS
)

ARGS=("$0" "${@}")

VERBOSE=0
declare -A DEFAULTS

set_vars() {
    CRTSCRIPT="$0"
    CRTSCRIPT_ABS="`readlink -f ${CRTSCRIPT}`"
    SCRIPTSDIR="${CRTSCRIPT_ABS%/*}"

    # Default values for variables in script-expandable format. Will be evaluated
    # when assigning the values to the variables
    DEFAULTS=(
        [VMNAME]='vmachine'
        [GUEST_TYPE]='${GUEST_TYPE:-freebsd}' # Properly compute defaults depending on guest type
        [WORKDIR]='${SCRIPTSDIR}/${GUEST_TYPE}'
        [ISOFILE]='${WORKDIR}/disk.iso'
        [CKPFILE]='${WORKDIR}/test.ckp'
        [GUESTIMG_DISK]='${WORKDIR}/guest.img'
        [TMPFSDIR]='${SCRIPTSDIR}/tmpfs_dir' # This directory should be common between guests
        [GUESTIMG_TMP]='${TMPFSDIR}/${DEFAULTS[GUESTIMG_DISK]##*/}'
        [GUESTIMG_SIZE]='4096M'
        [MNTDIR]='/mnt'
        [MDNUM]='50' # big numbers have a small chance to be used # TODO: parse number if possible
        [NETDEV]='virtio-net'
        [BLKDEV]='virtio-blk'
        [MEMSIZE]='2048M'
        [CPUS]='2'
    )

    for VAR in "${VARIABLES[@]}"; do
        eval ${VAR}="${!VAR:-${DEFAULTS[${VAR}]}}"
    done
}

longest_var_name() {
    local LEN=0

    for VAR in "${VARIABLES[@]}"; do
        if [ ${LEN} -lt ${#VAR} ]; then LEN=${#VAR}; fi
    done

    echo $((${LEN} + 1))
}

usage() {
    set_vars # Make sure variables are properly set when trying to print

    ALIGN_LEN=$(longest_var_name)

    eval 1>&2
    printf -- "$CRTSCRIPT [-CRSbcdhlmrtu]\n"
    printf -- "Perform regular operations on a bhyve virtual machine\n"
    printf -- "If a temp file exists, use it since it is in a tmpfs ramdisk\n"
    printf -- "since the image may get broken. To replace it, simply run \`$CRTSCRIPT -t\`\n"
    printf -- "If the tmpfs does not exist, the script create it and copy the image there to keep the disk image fresh\n"
    printf -- "\n"
    printf -- "At least one command must be provided.\n"
    printf -- "'-l' and '-w' are not commands, but the values they set for GUEST_TYPE have precedence\n"
    printf -- "\n"
    printf -- "The following short commands and options are available:\n"
    printf -- "-C Create a checkpoint for the virtual machine\n"
    printf -- "-R Restore the virtual machine from a previous checkpoint\n"
    printf -- "-S Suspend the virtual machine\n"
    printf -- "-c Create a virtual machine named vmachine\n"
    printf -- "-d Destroy the virtual machine\n"
    printf -- "-h Display this help message and exit\n"
    printf -- "-l use a Linux guest. Has the same result as setting 'GUEST_TYPE=linux'\n"
    printf -- "-L use a Linux guest with GUI. Has the same result as setting 'GUEST_TYPE=linux-gui'\n"
    printf -- "-m create a memdisk device for the guest image and mount it over \$MNTDIR\n"
    printf -- "-r Run virtual machine\n"
    printf -- "-t copy virtual machine disk file to tmpfs\n"
    printf -- "-u unmount \${MNTDIR} and delete the memdisk device\n"
    printf -- "-v be verbose when running commands\n"
    printf -- "-w use a Windows guest. Has the same result as setting 'GUEST_TYPE=windows'\n"
    printf -- "\n"
    printf -- "The script uses the following variables:\n"
    printf -- " -> VMNAME:        Name of the virtual machine\n"
    printf -- " -> GUEST_TYPE:    Type of the guest. Ordinarily should be: freebsd, linux or windows\n"
    printf -- " -> WORKDIR:       Root work directory for the guest type\n"
    printf -- " -> ISOFILE:       Name of the guest installation disk\n"
    printf -- " -> CKPFILE:       Name of guest memory checkpoint file\n"
    printf -- " -> GUESTIMG_DISK: Name of the guest image disk file\n"
    printf -- " -> TMPFSDIR:      A directory where the guest image will be copied; a tmpfs will be mounted on top of it\n"
    printf -- " -> GUESTIMG_TMP:  Name of the temporary copy of the guest disk file\n"
    printf -- " -> GUESTIMG_SIZE: Size of the guest image file, as used by truncate(1)\n"
    printf -- " -> MNTDIR:        Guest image mount target directory\n"
    printf -- " -> NETDEV:        Network device emulation type for the guest (e1000 or virtio-net)\n"
    printf -- " -> BLKDEV:        Block device emulation type used by the guest (ahci-hd or virtio-blk)\n"
    printf -- " -> MEMSIZE:       Guest memory amount\n"
    printf -- " -> CPUS:          Number of vCPUs\n"
    printf -- "\n"
    printf -- "NOTE: Since the GUEST_TYPE variable is only used to determine a subdirectory, its value can be anything\n"
    printf -- "\n"
    printf -- "Default values:\n"
    for VAR in "${VARIABLES[@]}"; do
        case "${DEFAULTS[${VAR}]}" in
        *'$'*)
            printf " >> %-*s %s (%s)\n" ${ALIGN_LEN} "${VAR}:" "${DEFAULTS[${VAR}]}" "$(eval echo ${DEFAULTS[${VAR}]})";;
        *)
            printf " >> %-*s %s\n" ${ALIGN_LEN} "${VAR}:" "$(eval echo ${DEFAULTS[${VAR}]})";;
        esac
    done
    printf -- "\n"
    printf -- "For convenience the following long options are available:\n"
    printf -- "--print-env        Print currently set variables used by the script. No commands will be executed\n"
    printf -- "--link-iso=<value> Replace \${ISOFILE} with a symbolic link to <value>\n"
    printf -- "\n"
    printf -- "[Long options setter arguments]\n"
    printf -- "--vmname           Set the VMNAME variable\n"
    printf -- "--guest-type       Set the GUEST_TYPE variable\n"
    printf -- "--workdir          Set the WORKDIR variable\n"
    printf -- "--iso              Set the ISOFILE variable\n"
    printf -- "--ckpfile          Set the CKPFILE variable\n"
    printf -- "--mntdir           Set the MNTDIR variable\n"
    printf -- "--guestimg-disk    Set the GUESTIMG_DISK variable\n"
    printf -- "--tmpfs-dir        Set the TMPFSDIR variable\n"
    printf -- "--guestimg-tmp     Set the GUESTIMG_TMP variable\n"
    printf -- "--guestimg-size    Set the GUESTIMG_SIZE variable\n"
    printf -- "--mntdir           Set the MNTDIR variable\n"
    printf -- "--mdnum            Set the MDNUM variable\n"
    printf -- "--netdev           Set the NETDEV variable\n"
    printf -- "| --e1000          Set the NETDEV variable to e1000\n"
    printf -- "| --virtio-net     Set the NETDEV variable to virtio-net\n"
    printf -- "--blkdev           Set the BLKDEV variable\n"
    printf -- "| --ahci           Set the BLKDEV variable to ahci-hd\n"
    printf -- "| --virtio-blk     Set the BLKDEV variable to virtio-blk\n"
    printf -- "--memsize          Set the MEMSIZE variable\n"
    printf -- "--cpus             Set the CPUS variable\n"
    printf -- "\n"
    exit $1
}

GUESTIMG() {
    mkdir -p "${TMPFSDIR}"
    if ! $(mount | grep "`readlink -f ${TMPFSDIR}`" 2>&1 >/dev/null && test -f "${GUESTIMG_TMP}"); then
        cp_vm_tmpfs
    fi
    echo "${GUESTIMG_TMP}"
}

checkpoint_vm() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Creating vm ${VMNAME} checkpoint in file ${CKPFILE}"
    fi
    ${WORKDIR}/checkpoint_vm.sh "${CKPFILE}" "${VMNAME}"

    sleep 1
    sync
}

restore_vm() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Restoring vm ${VMNAME} from file ${CKPFILE}"
    fi
    ${WORKDIR}/restore_vm.sh "$(GUESTIMG)" "${CKPFILE}" "${VMNAME}"
}

suspend_vm() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Suspending vm ${VMNAME} to file ${CKPFILE}"
    fi
    ${WORKDIR}/suspend_vm.sh "${CKPFILE}" "${VMNAME}"
}

cp_vm_tmpfs() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Copying vm disk ${GUESTIMG_DISK} to ${GUESTIMG_TMP}"
    fi
    if ! $(mount | grep "`readlink -f ${TMPFSDIR}`" 2>&1 >/dev/null); then
        mount -t tmpfs tmpfs "${TMPFSDIR}"
    fi

    rm -f -v "${TMPFSDIR}"/* 1>&2

    cp -v "${GUESTIMG_DISK}" "${GUESTIMG_TMP}"
} 1>&2

create_vm() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Creating vm ${VMNAME} with ${ISOFILE}"
    fi
    truncate -s ${GUESTIMG_SIZE} "${GUESTIMG_DISK}"
    ${WORKDIR}/create_vm.sh "${GUESTIMG_DISK}" "${ISOFILE}" "${VMNAME}" >/dev/null
    cp_vm_tmpfs
}

destroy_vm() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Destroying vm ${VMNAME}..."
    fi
    bhyvectl --destroy --vm="${VMNAME}"
}

run_vm() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Running vm ${VMNAME}..."
    fi
    ${WORKDIR}/run_vm.sh "$(GUESTIMG)" "${VMNAME}"
}

bad_option() {
    echo "$@" 1>&2
    echo 1>&2
    exit 3
}

mount_vm_image() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Mounting /dev/md${MDNUM}s1a over ${MNTDIR}"
    fi
    mdconfig -u "${MDNUM}" "$(GUESTIMG)"
    mount "/dev/md${MDNUM}s1a" "${MNTDIR}"
}

umount_vm_image() {
    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Unmounting ${MNTDIR}"
    fi
    umount "${MNTDIR}"
    mdconfig -d -u "${MDNUM}"
}

print_env() {
    ALIGN_LEN=$(longest_var_name)

    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Print environment"
    fi

    for VAR in "${VARIABLES[@]}"; do
        printf "%-*s %s\n" ${ALIGN_LEN} "${VAR}:" "${!VAR}"
    done
}

link_iso() {
    ISO="`readlink -f ${1}`"

    if [ ${VERBOSE} -eq 1 ]; then
        echo " + Linking ${ISOFILE} to ${ISO}"
    fi

    GUESS_GTYPE="${ISO%/*}"
    GUESS_GTYPE="${GUESS_GTYPE##*/}"
    if [ "${GUESS_GTYPE}" != "${GUEST_TYPE}" ]; then
        printf -- "\x1b[1;31mWarning:\x1b[0m You might try to link an iso of another guest type\n"
    fi

    if [ -f "${ISOFILE}" ]; then
        echo "${ISOFILE} already exists!" 1>&2
        rm -i "${ISOFILE}"
    fi

    if [ -f "${ISOFILE}" ]; then
        echo "File ${ISOFILE} was not removed. Cannot create link" 1>&2
        echo 1>&2
    else
        ln -s "${ISO}" "${ISOFILE}"
    fi
}

export_variables() {
    for VAR in "${VARIABLES[@]}"; do
        export ${VAR}
    done
    export VERBOSE
}

set_longopt_var() {
    local VAR="$1"

    case "${OPTARG}" in
    *=*) eval "${VAR}=${OPTARG#*=}" ;;
    *)   eval "${VAR}=${ARGS[$OPTIND]}"; OPTIND=$((OPTIND+1)) ;;
    esac
}

set_longopt_command() {
    local CMD="$1"

    case "${OPTARG}" in
    *=*) eval "COMMANDS+=(\"${CMD} ${OPTARG#*=}\")" ;;
    *)   eval "COMMANDS+=(\"${CMD} ${ARGS[$OPTIND]}\")"; OPTIND=$((OPTIND+1)) ;;
    esac
}

COMMANDS=()
OPTSTR="CRSbcdhlLmrtuvw-:"
HELP=0
PRINTENV=0

while getopts "${OPTSTR}" opt; do
    case "${opt}" in
    C) COMMANDS+=("checkpoint_vm");;
    R) COMMANDS+=("restore_vm");;
    S) COMMANDS+=("suspend_vm");;
    c) COMMANDS+=("create_vm");;
    d) COMMANDS+=("destroy_vm");;
    h) HELP=1;;
    l) GUEST_TYPE="linux";;
    L) GUEST_TYPE="linux-gui";;
    m) COMMANDS+=("mount_vm_image");;
    r) COMMANDS+=("run_vm");;
    t) COMMANDS+=("cp_vm_tmpfs");;
    u) COMMANDS+=("umount_vm_image");;
    v) VERBOSE=1;;
    w) GUEST_TYPE="windows";;
    -) case "${OPTARG}" in
       print-env)         PRINTENV=1 ;;

       link-iso)          ;&
       link-iso=*)        set_longopt_command link_iso ;;

       vmname)            ;&
       vmname=*)          set_longopt_var VMNAME ;;

       guest-type)        ;&
       guest-type=*)      set_longopt_var GUEST_TYPE ;;

       workdir)           ;&
       workdir=*)         set_longopt_var WORKDIR ;;

       iso)               ;&
       iso=*)             set_longopt_var ISOFILE ;;

       ckpfile)           ;&
       ckpfile=*)         set_longopt_var CKPFILE ;;

       mntdir)            ;&
       mntdir=*)          set_longopt_var MNTDIR ;;

       guestimg-disk)     ;&
       guestimg-disk=*)   set_longopt_var GUESTIMG_DISK ;;

       tmpfs-dir)         ;&
       tmpfs-dir=*)       set_longopt_var TMPFSDIR ;;

       guestimg-tmp)      ;&
       guestimg-tmp=*)    set_longopt_var GUESTIMG_TMP ;;

       guestimg-size)     ;&
       guestimg-size=*)   set_longopt_var GUESTIMG_SIZE ;;

       mntdir)            ;&
       mntdir=*)          set_longopt_var MNTDIR ;;

       mdnum)             ;&
       mdnum=*)           set_longopt_var MDNUM ;;

       netdev)            ;&
       netdev=*)          set_longopt_var NETDEV ;;
       e1000)             NETDEV='e1000' ;;
       virtio-net)        NETDEV='virtio-net' ;;

       blkdev)            ;&
       blkdev=*)          set_longopt_var BLKDEV ;;
       ahci)              BLKDEV='ahci-hd' ;;
       virtio-blk)        BLKDEV='virtio-blk' ;;

       memsize)           ;&
       memsize=*)         set_longopt_var MEMSIZE ;;

       cpus)              ;&
       cpus=*)            set_longopt_var CPUS ;;

       *)                 bad_option "Unrecognized option: ${OPTARG}" 1>&2 ;;
       esac
       ;;
    *) usage 1;;
    esac
done

set_vars

if [ "${HELP}" -eq 1 ]; then
    usage 0
fi

if [ "${PRINTENV}" -eq 1 ]; then
    print_env
    exit 0
fi

if [ "${#COMMANDS[@]}" -eq 0 ]; then
    echo "No commands were specified!" 1>&2
    echo 1>&2
    usage 2;
fi

# These are prerequisites for any guest type
kldload vmm &>/dev/null || true
#"${WORKDIR}"/tap.sh &>/dev/null || true

export_variables

for COMMAND in "${COMMANDS[@]}"; do
    eval ${COMMAND}
done
